//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by BLToolkit template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

using BLToolkit.Data;
using BLToolkit.Data.DataProvider;
using BLToolkit.Data.Linq;
using BLToolkit.Data.Sql;
using BLToolkit.Data.Sql.SqlProvider;
using BLToolkit.DataAccess;
using BLToolkit.Mapping;

namespace Model
{
	public partial class DataModel : DbManager
	{
		
		#region FreeTextTable
		
		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}
		
		class FreeTextTableExpressionAttribute : TableExpressionAttribute
		{
			public FreeTextTableExpressionAttribute()
				: base("")
			{
			}
		
			public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
			{
				var aargs  = sqlArgs.ToArray();
				var arr    = ConvertArgs(member, aargs).ToList();
				var method = (MethodInfo)member;
				var sp     = new MsSql2008SqlProvider();
		
				{
					var ttype  = method.GetGenericArguments()[0];
					var tbl    = new SqlTable(ttype);
		
					var database     = tbl.Database     == null ? null : sp.Convert(tbl.Database,     ConvertType.NameToDatabase).  ToString();
					var owner        = tbl.Owner        == null ? null : sp.Convert(tbl.Owner,        ConvertType.NameToOwner).     ToString();
					var physicalName = tbl.PhysicalName == null ? null : sp.Convert(tbl.PhysicalName, ConvertType.NameToQueryTable).ToString();
		
					var name   = sp.BuildTableName(new StringBuilder(), database, owner, physicalName);
		
					arr.Add(new SqlExpression(name.ToString(), Precedence.Primary));
				}
		
				{
					var field = ((ConstantExpression)expArgs.First()).Value;
		
					if (field is string)
					{
						arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
					}
					else if (field is LambdaExpression)
					{
						var body = ((LambdaExpression)field).Body;
		
						if (body is MemberExpression)
						{
							var name = ((MemberExpression)body).Member.Name;
		
							name = sp.Convert(name, ConvertType.NameToQueryField).ToString();
		
							arr[0] = new SqlExpression(name, Precedence.Primary);
						}
					}
				}
		
				table.SqlTableType   = SqlTableType.Expression;
				table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
				table.TableArguments = arr.ToArray();
			}
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}
		
		#endregion
	}

	[TableName(Name="RefreshTokens")]
	public partial class RefreshTokens : ModelBase
	{
		[PrimaryKey(1)] public string   Id              { get; set; } // nvarchar(128)
		                public string   Subject         { get; set; } // nvarchar(50)
		                public DateTime IssuedUtc       { get; set; } // datetime(3)
		                public DateTime ExpiresUtc      { get; set; } // datetime(3)
		                public string   ProtectedTicket { get; set; } // nvarchar(-1)
	}

	[TableName(Name="Users")]
	public partial class Users : ModelBase
	{
		[          PrimaryKey(1)] public string    Id                   { get; set; } // nvarchar(128)
		[Nullable               ] public string    Email                { get; set; } // nvarchar(256)
		                          public bool      EmailConfirmed       { get; set; } // bit
		[Nullable               ] public string    PasswordHash         { get; set; } // nvarchar(-1)
		[Nullable               ] public string    SecurityStamp        { get; set; } // nvarchar(-1)
		[Nullable               ] public string    PhoneNumber          { get; set; } // nvarchar(-1)
		                          public bool      PhoneNumberConfirmed { get; set; } // bit
		                          public bool      TwoFactorEnabled     { get; set; } // bit
		[Nullable               ] public DateTime? LockoutEndDateUtc    { get; set; } // datetime(3)
		                          public bool      LockoutEnabled       { get; set; } // bit
		                          public int       AccessFailedCount    { get; set; } // int(10)
		                          public string    UserName             { get; set; } // nvarchar(256)
		                          public string    Discriminator        { get; set; } // nvarchar(128)
	}
}
